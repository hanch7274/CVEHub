"""
자동 생성된 Beanie 모델 파일 - 직접 수정하지 마세요
생성 시간: {{ generation_timestamp }}
"""
from typing import List, Optional, Dict, Any, Literal
from datetime import datetime
from zoneinfo import ZoneInfo
from beanie import Document, PydanticObjectId
from pydantic import Field, BaseModel, validator
from bson import ObjectId
import re
from app.common.models.base_models import BaseDocument

# ---------- 유틸리티 함수 ----------

def serialize_datetime(dt: datetime) -> str:
    """날짜를 ISO 8601 형식의 문자열로 직렬화"""
    return dt.replace(tzinfo=ZoneInfo("UTC")).isoformat().replace('+00:00', 'Z') if dt else None

# ---------- 임베디드 모델 ----------

class ChangeItem(BaseModel):
    """변경 사항을 표현하는 모델"""
    field: str = Field(..., description="변경된 필드명")
    field_name: str = Field(..., description="필드의 한글명")
    action: Literal["add", "edit", "delete", "context", "count_change"] = Field(..., description="변경 유형")
    detail_type: Literal["simple", "detailed"] = Field(default="detailed", description="변경 내역 표시 방식")
    before: Optional[Any] = Field(None, description="변경 전 값")
    after: Optional[Any] = Field(None, description="변경 후 값")
    items: Optional[List[dict]] = Field(None, description="컬렉션 타입 필드의 변경 항목들")
    summary: str = Field(..., description="변경 요약")
    
    class Config:
        json_encoders = {
            datetime: serialize_datetime
        }

class Reference(BaseModel):
    """Reference 모델"""
    url: str = Field(..., description="참조 URL")
    type: str = Field(default="OTHER", description="참조 타입")
    description: Optional[str] = Field(None, description="참조 설명")
    created_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="생성 시간")
    created_by: str = Field(..., description="추가한 사용자")
    last_modified_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="마지막 수정 시간")
    last_modified_by: str = Field(..., description="마지막 수정자")
    
    class Config:
        json_encoders = {
            datetime: serialize_datetime
        }
    
class PoC(BaseModel):
    """PoC 모델"""
    source: str = Field(..., description="PoC 소스")
    url: str = Field(..., description="PoC URL")
    description: Optional[str] = Field(None, description="PoC 설명")
    created_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="생성 시간")
    created_by: str = Field(..., description="추가한 사용자")
    last_modified_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="마지막 수정 시간")
    last_modified_by: str = Field(..., description="마지막 수정자")
    
    class Config:
        json_encoders = {
            datetime: serialize_datetime
        }
    
class SnortRule(BaseModel):
    """SnortRule 모델"""
    rule: str = Field(..., description="Snort Rule 내용")
    type: str = Field(..., description="Rule 타입")
    description: Optional[str] = Field(None, description="Rule 설명")
    created_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="생성 시간")
    created_by: str = Field(..., description="추가한 사용자")
    last_modified_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="마지막 수정 시간")
    last_modified_by: str = Field(..., description="마지막 수정자")
    
    class Config:
        json_encoders = {
            datetime: serialize_datetime
        }
    
class Comment(BaseModel):
    """Comment 모델"""
    id: str = Field(default=lambda: str(ObjectId()), description="댓글 ID")
    content: str = Field(..., description="댓글 내용")
    created_by: str = Field(..., description="작성자 이름")
    parent_id: Optional[str] = Field(default=None, description="부모 댓글 ID")
    depth: int = Field(default=0, description="댓글 깊이")
    is_deleted: bool = Field(default=False, description="삭제 여부")
    created_at: datetime = Field(default=lambda: datetime.now(ZoneInfo("UTC")), description="생성 시간")
    last_modified_at: Optional[datetime] = Field(None, description="마지막 수정 시간")
    last_modified_by: Optional[str] = Field(None, description="마지막 수정자")
    mentions: List[str] = Field(default=[], description="멘션된 사용자 목록")
    
    class Config:
        json_encoders = {
            datetime: serialize_datetime
        }

# ---------- 문서 모델 ----------

class CVEModel(BaseDocument):
    """CVE 모델 - 자동 생성됨"""
    cve_id: str = Field(..., description="CVE ID")
    title: Optional[str] = Field(None, description="CVE 제목")
    description: Optional[str] = Field(None, description="CVE 설명")
    status: str = Field(default="신규등록", description="CVE 상태")
    assigned_to: Optional[str] = Field(default=None, description="담당자")
    severity: Optional[str] = Field(None, description="심각도")
    created_by: str = Field(..., description="추가한 사용자")
    last_modified_by: Optional[str] = Field(default=None, description="마지막 수정자")
    is_locked: bool = Field(default=False, description="편집 잠금 여부")
    locked_by: Optional[str] = Field(None, description="잠금 설정한 사용자")
    lock_timestamp: Optional[datetime] = Field(None, description="잠금 설정 시간")
    lock_expires_at: Optional[datetime] = Field(None, description="잠금 만료 시간")
    notes: Optional[str] = Field(default=None, description="내부 참고사항")
    nuclei_hash: Optional[str] = Field(default=None, description="Nuclei 템플릿 해시")
    
    # 임베디드 필드
    comments: List[Comment] = Field(default=[])
    poc: List[PoC] = Field(default=[])
    snort_rule: List[SnortRule] = Field(default=[])
    reference: List[Reference] = Field(default=[])
    
    class Settings:
        name = "cves"
        id_field = "cve_id"
        indexes = [
            "status",
            "assigned_to",
            "last_modified_at",
            "created_at",
            "created_by",
            "is_locked",
            "locked_by",
            [("last_modified_at", -1)], 
            [("created_at", -1)],
            [("status", 1), ("last_modified_at", -1)],
            [
                ("cve_id", "text"), 
                ("title", "text"), 
                ("description", "text")
            ]
        ]
        unique_indexes = [
            [("cve_id", 1)]
        ]